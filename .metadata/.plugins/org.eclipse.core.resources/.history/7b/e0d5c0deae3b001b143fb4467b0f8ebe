
package courseraita;

import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.HashSet;
import java.util.LinkedList;

public class DriverArquivoTXT {
	
	private static File file = new File( "pontuacaoGamificacao.txt" );
	private final  String SEPARADOR_CAMPOS = "!";
	private static LinkedList<PontuacaoUsuarios> _pontuacaoUsuarios = new LinkedList<PontuacaoUsuarios>();
	private static HashSet<String> _diferentesTiposDePontos = new HashSet<String>();

	public LinkedList<PontuacaoUsuarios> cargaEmCacheApartirArquivoTXT() throws Exception {
		
		LinkedList<PontuacaoUsuarios> _pontuacaoCache = new LinkedList<PontuacaoUsuarios>();
		try {
			File file = new File("pontuacao.txt"); 			
			if (file.exists()) { 
				RandomAccessFile fileTXT = new RandomAccessFile(file, "rw");				
				
				String bufferLeitura; 
				int index; 
				String nomeUsuario;
				String tipoPontuacao;
				String pontos;
				boolean regEncontrado = false; 
				int numRegsLidos = 0;
				while (fileTXT.getFilePointer() < fileTXT.length()) { 

					bufferLeitura = fileTXT.readLine(); 
					index = bufferLeitura.indexOf('!'); 
					nomeUsuario = bufferLeitura.substring(0, index); 
					System.out.println("\n Reg Lido - Usuario Encontrado ==> " + nomeUsuario);
					
					tipoPontuacao = bufferLeitura.substring(index + 1); 
					System.out.println("--> " + tipoPontuacao);
					
					pontos = bufferLeitura.substring(index + 2 );
					System.out.println(" --> " + pontos);
					
					_pontuacaoCache.add(new PontuacaoUsuarios (nomeUsuario, tipoPontuacao, Integer.parseInt(pontos)));

					numRegsLidos++;
					System.out.println("\n Reg Pontuacao Lida do Arquivo TXT = " + numRegsLidos); 
				} 
				System.out.println(" Foram lidos todos os registros do ArquivoTXT"); 
				fileTXT.close(); 
			}
			else {
				System.out.println(" Arquivo TXT VAZIO - Nada a colocar em CACHE!!!"); 
			}
		} 
		catch (EOFException ex) 
		{ 
			ex.printStackTrace(); 
			throw new Exception ("Fim de Arquivo TXT");
		} 		
		catch (IOException ex) 
		{ 
			ex.printStackTrace(); 
			throw new Exception ("Problema em I/o no Arquivo TXT");
		} 
	}

	private void armazenarPontuacaoDeUmUsuario( PontuacaoUsuarios p) throws IOException, Exception {
		
		_pontuacaoUsuarios.add (p);
		
		System.out.println ("\n PONTUAÇAÕ SENDO INCLUIDA A PARTIR DO ARQUIVO TXT: ");
		for (int i=0; i < _pontuacaoUsuarios.size(); i++) {			
			  System.out.print("\n(" + i + ") " +
					  _pontuacaoUsuarios.get(i).getUsuario() + ", " + 
					  _pontuacaoUsuarios.get(i).getTipoPonto() + ", " + 
					  _pontuacaoUsuarios.get(i).getPontos());
		}
		
		if ( p.getPontos() != 0 && !_diferentesTiposDePontos.contains(p._tipoPonto))	
		
			_diferentesTiposDePontos.add (p._tipoPonto);
		
		persisteDadosNoArquivoTXT(p);
		
	}

	private PontuacaoUsuarios ExtrairEGravarRegistroPontuacao (long posicaoInicialReg, long sizeRegAtual) throws Exception {
		
		try {
			RandomAccessFile fileTXT = new RandomAccessFile("pontuacaoGamificacao.txt", "rw"); 

			fileTXT.seek( posicaoInicialReg + 1l); 
			int sizeNomeUsuario = fileTXT.readInt();
			System.out.println (" \n DriverTXT size do Nome do Usuario ==> " + sizeNomeUsuario);

			fileTXT.seek( posicaoInicialReg + 2l) ; 
			int sizeNomeTipoPonto   = fileTXT.readInt();
			System.out.println (" TipoUsuario ==> " + sizeNomeTipoPonto);

			fileTXT.seek(posicaoInicialReg + 3l); 
			int numeroPontos  = fileTXT.readInt();
			System.out.println (" NumPontos ==> " + sizeNomeTipoPonto);

			long offset = posicaoInicialReg + 4l;
			int _byteNomeUsuario; 
			String _nomeUsuarios =""; 
			for (int i=0; i < sizeNomeTipoPonto; i++) {

				fileTXT.seek( offset + i);
				_byteNomeUsuario = fileTXT.read(); 
				_nomeUsuarios.concat( Integer.toString(_byteNomeUsuario) );
		    }
			System.out.println (" User ==> " + _nomeUsuarios);
			
			offset = posicaoInicialReg + 5l;
			int _byteTipoPonto;
			String _tipoPonto=""; 
			for (int i=0; i < sizeNomeTipoPonto; i++) {

					fileTXT.seek( offset + i);
					_byteTipoPonto = fileTXT.read(); 
					_tipoPonto.concat( Integer.toString(_byteTipoPonto)  );
			}				
			System.out.println (" Tipo Ponto ==> " + _tipoPonto);

			System.out.println (" \n DriverTXT reg lido TXT==> " + 
					_nomeUsuarios + ", " +   
					_tipoPonto +  ", " +
					numeroPontos);
			
			fileTXT.close();			
			return( new PontuacaoUsuarios (_nomeUsuarios, _tipoPonto, numeroPontos) );
		} 
		catch (EOFException ex) 
		{ 
			ex.printStackTrace(); 
			throw new Exception ("Fim de Arquivo TXT");
		} 		
		catch (IOException ex) 
		{ 
			ex.printStackTrace(); 
			throw new Exception ("Problema em I/o no Arquivo TXT");
		} 
	}

	public void persisteDadosNoArquivoTXT(PontuacaoUsuarios p) throws Exception, IOException {
		
		try { 
			
			File file = new File("pontuacao.txt"); 
			
			if (!file.exists()) { 
				file.createNewFile(); 
			} 
			
			RandomAccessFile fileTXT = new RandomAccessFile(file, "rw"); 
			
			String buffeGravacao = p.getUsuario() + SEPARADOR_CAMPOS + p.getTipoPonto() 
			                       + SEPARADOR_CAMPOS + String.valueOf(p.getPontos());
			
			System.out.println ("\n Registro a Gravar ===> " + 	buffeGravacao);	
			
			fileTXT.seek(fileTXT.length());
			fileTXT.writeBytes(buffeGravacao); 
			fileTXT.writeBytes(System.lineSeparator()); 
			fileTXT.close(); 

			System.out.println(" Pontuacao de Usuario Adicionada ao Arquivo TXTX !!"); 
		} 
		catch (IOException ioe) { 

			System.out.println(ioe); 
		} 
		catch (NumberFormatException nef) { 

			System.out.println(nef); 
		} 
    }

	public void deletarArquivoTextoDePontuacao() throws Exception {

		if (file.exists() ) {
			  System.out.println("\n size = " + (int) file.length() + " path= " + file.getAbsolutePath() );
			  if(file.delete()) 
			      System.out.println("File deleted successfully"); 
			  else
			      System.out.println("Failed to delete the file");
		}
	}
	
	
}
